#include <stdio.h>
#include <stdlib.h>
#include <omp.h>
#include <time.h>

int main() {

  int rows, cols, vec_length;
  printf("Enter the number of rows in matrix: ");
  scanf("%d", &rows);
  printf("Enter the number of columns in matrix: ");
  scanf("%d", &cols);
  
  // Allocate memory for matrix
  int **matrix = (int **)malloc(rows * sizeof(int *));
  for (int i = 0; i < rows; i++) {
    matrix[i] = (int *)malloc(cols * sizeof(int));
  }

  // Fill matrix with random numbers from 0 to 50
  srand(time(NULL));
  for (int i = 0; i < rows; i++) {
    for (int j = 0; j < cols; j++) {
      matrix[i][j] = rand() % 51;
    }
  }

  printf("Enter the length of vector: ");
  scanf("%d", &vec_length);

  // Allocate memory for vector
  int *vector = (int *)malloc(vec_length * sizeof(int));
    for (int j = 0; j < vec_length; j++) {
      vector[j] = rand() % 51;
    }

  printf("\n");

  // Sequential version
  int *result_seq = (int *)malloc(rows * sizeof(int));
  clock_t start_seq, end_seq;
  double time_seq;
  start_seq = clock();
  for (int i = 0; i < rows; i++) {
    result_seq[i] = 0;
    for (int j = 0; j < cols; j++) {
      result_seq[i] = result_seq[i] + (matrix[i][j] * vector[j]);
    }
  }
  end_seq = clock();
  time_seq = ((double)(end_seq - start_seq)) / CLOCKS_PER_SEC;

  // Parallel version
  int *result_par = (int *)malloc(rows * sizeof(int));
  double start_par, end_par, time_par;
  omp_set_num_threads(20);
  start_par = omp_get_wtime();
  #pragma omp parallel shared(result_par, vector)
  {
    if (omp_in_parallel()) {
      int tid = omp_get_thread_num();
      printf("The current running thread is %d.\n", tid);
      #pragma omp for
      for (int i = 0; i < rows; i++) {
        result_par[i] = 0;
        for (int j = 0; j < cols; j++) {
          #pragma omp critical
          result_par[i] = result_par[i] + (matrix[i][j] * vector[j]);
        }
      }
      // #pragma omp single
      // {
      //   printf("The multiplication result is: \n");
      //   for (int i = 0; i < rows; i++) {
      //     printf("%d ", result_par[i]);
      //   }
      // }
    } else {
      printf("Cannot do vector matrix multiplication\n");
    }
  }
  end_par = omp_get_wtime();
  time_par = end_par - start_par;

  // Calculate speedup factor and efficiency
  double speedup = time_seq / time_par;
  double efficiency = speedup / 20.0;
  double scalability = speedup / omp_get_num_threads();

  printf("\nSequential execution time: %f\n", time_seq);
  printf("Parallel execution time: %f\n", time_par);
  printf("Speedup factor: %f\n", speedup);
  printf("Parallel efficiency: %f\n", efficiency);
  printf("Scalability: %f\n", scalability);

  // Free allocated memory
  free(vector);
  free(result_seq);
  free(result_par);
  for (int i = 0; i < rows; i++) {
    free(matrix[i]);
  }
  free(matrix);

  return 0;
}
