#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <time.h>

#define MAX_ROW 1000
#define MAX_COL 1000

int A[MAX_ROW][MAX_COL], B[MAX_ROW][MAX_COL], C[MAX_ROW][MAX_COL];

int n, num_threads;

void* matrix_mul(void* arg) {
    int thread_num = *((int*)arg);
    int i, j, k, start_row, end_row;
    start_row = thread_num * n / num_threads;
    end_row = (thread_num + 1) * n / num_threads;
    for (i = start_row; i < end_row; i++) {
        for (j = 0; j < n; j++) {
            C[i][j] = 0;
            for (k = 0; k < n; k++) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
    pthread_exit(NULL);
}

int main(int argc, char** argv) {
    int i, j;
    n = atoi(argv[1]);
    num_threads = atoi(argv[2]);
    pthread_t threads[num_threads];
    int thread_args[num_threads];
    struct timespec start, end;
    double elapsed_time;

    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            A[i][j] = rand() % 51;
            B[i][j] = rand() % 51;
        }
    }

    clock_gettime(CLOCK_MONOTONIC, &start);

    for (i = 0; i < num_threads; i++) {
        thread_args[i] = i;
        pthread_create(&threads[i], NULL, matrix_mul, &thread_args[i]);
    }

    for (i = 0; i < num_threads; i++) {
        pthread_join(threads[i], NULL);
    }

    clock_gettime(CLOCK_MONOTONIC, &end);

    elapsed_time = (end.tv_sec - start.tv_sec) + (end.tv_nsec - start.tv_nsec) / 1e9;

    printf("the execution time = %.6f seconds.\n", elapsed_time);

    return 0;
}
